{"version":3,"sources":["TodoListTask.jsx","TodoListTasks.jsx","TodoListFooter.jsx","TodoListTitle.jsx","AddNewItemForm.jsx","TodoList.jsx","App.jsx","serviceWorker.js","index.js"],"names":["TodoListTask","state","editModeTitle","editModePriority","onPriorityChange","e","task","_this","props","changePriority","id","currentTarget","value","onTitleChange","changeTitle","onIsDoneChange","changeStatus","checked","activateEditModeTitle","setState","deActivateEditModeTitle","activateEditModePriority","deActivateEditModePriority","render","taskOrIsDoneStyle","isDone","react_default","a","createElement","className","onChange","type","onBlur","autoFocus","title","onClick","priority","React","Component","TodoListTasks","taskElements","tasks","map","t","src_TodoListTask","TodoListFooter","isHidden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filterValue","classForCompleted","classForActive","TodoListTitle","AddNewItemForm","error","onAddItemClick","newText","trim","addItem","onKeyPress","key","errorClass","placeholder","TodoList","newTaskTitleRef","createRef","nextTaskId","saveState","stateAsString","JSON","stringify","localStorage","setItem","restoreState","getItem","parse","newTask","newTasks","concat","Object","toConsumableArray","changeTask","taskId","obj","_objectSpread","newFilterValue","incomTitle","incomPriority","src_TodoListTitle","src_AddNewItemForm","src_TodoListTasks","filter","src_TodoListFooter","this","App","todolists","addTodoList","newTitle","todoList","tl","src_TodoList","Fragment","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9ec77312.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass TodoListTask extends React.Component {\n\n    state = {\n        editModeTitle: false,\n        editModePriority: false\n    }\n\n    onPriorityChange = (e) => {\n        let task = this.props.task\n        this.props.changePriority(task.id, e.currentTarget.value)\n    }\n    onTitleChange = (e) => {\n        let task = this.props.task\n        this.props.changeTitle(task.id, e.currentTarget.value)\n    }\n    onIsDoneChange = (e) => {\n        let task = this.props.task\n        this.props.changeStatus(task.id, e.currentTarget.checked)\n    }\n    activateEditModeTitle = () => {\n        this.setState({\n            editModeTitle: true\n        })\n    }\n    deActivateEditModeTitle = () => {\n        this.setState({\n            editModeTitle: false\n        })\n    }\n    activateEditModePriority = () => {\n        this.setState({\n            editModePriority: true\n        })\n    }\n    deActivateEditModePriority = () => {\n        this.setState({\n            editModePriority: false\n        })\n    }\n\n    render = () => {\n        let taskOrIsDoneStyle = this.props.task.isDone === true ? 'todoList-task-done' : 'todoList-task'\n        return (\n            <div className={taskOrIsDoneStyle}>\n                <input onChange={this.onIsDoneChange} type=\"checkbox\" checked={this.props.task.isDone} />\n                {this.state.editModeTitle\n                    ? <input onBlur={this.deActivateEditModeTitle}\n                        onChange={this.onTitleChange}\n                        autoFocus={true} value={this.props.task.title} />\n                    : <span onClick={this.activateEditModeTitle}> {this.props.task.id}.{' '}{this.props.task.title} </span>\n                },\n                {this.state.editModePriority\n                    ? <input value={this.props.task.priority}\n                        onChange={this.onPriorityChange} onBlur={this.deActivateEditModePriority} />\n                    : <span onClick={this.activateEditModePriority}> priority: {this.props.task.priority}</span>\n                }\n            </div>\n        );\n    }\n}\n\nexport default TodoListTask;\n\n","import React from 'react';\nimport './App.css';\nimport TodoListTask from './TodoListTask';\n\nclass TodoListTasks extends React.Component {\n    render = () => {\n\n        let taskElements = this.props.tasks.map( \n            t => <TodoListTask changeTitle={this.props.changeTitle} \n            changePriority={this.props.changePriority}\n            changeStatus={this.props.changeStatus} task={t}/>)\n        return (\n                    <div className=\"todoList-tasks\">\n                        {taskElements}\n                    </div>\n        );\n    }\n}\n\nexport default TodoListTasks;\n\n","import React from 'react';\nimport './App.css';\n\nclass TodoListFooter extends React.Component {\n    state = {\n        isHidden: false\n    }\n    onAllFilterClick = () => { this.props.changeFilter('All')}\n    onCompletedFilterClick = () => {this.props.changeFilter('Completed') }\n    onActiveFilterClick = () => { this.props.changeFilter('Active')  }\n    onShowFiltersClick = () => { this.setState({ isHidden: false })  }\n    onHideFiltersClick = () => { this.setState({ isHidden: true })  }\n    render = () => {\n\n        let classForAll = this.props.filterValue === 'All' ? 'filter-active' : '';\n        let classForCompleted = this.props.filterValue === 'Completed' ? 'filter-active' : '';\n        let classForActive = this.props.filterValue === 'Active' ? 'filter-active' : '';\n\n        return (\n            <div className=\"todoList-footer\">\n                {!this.state.isHidden && <div><button onClick={this.onAllFilterClick} className={classForAll}>All</button>\n                    <button onClick={this.onCompletedFilterClick} className={classForCompleted}>Completed</button>\n                    <button onClick={this.onActiveFilterClick} className={classForActive}>Active</button> </div>}\n                {!this.state.isHidden && <span onClick={this.onHideFiltersClick}>hide</span>}\n                {this.state.isHidden && <span onClick={this.onShowFiltersClick}>show</span>}\n            </div>\n        );\n    }\n}\n\nexport default TodoListFooter;\n\n","import React from 'react';\nimport './App.css';\n\nclass TodoListTitle extends React.Component {\n\n    render = () => {\n        return (\n            <div className=\"todoList-header\">\n                <h3 className=\"todoList-header__title\">{this.props.title}</h3>\n            </div>\n        );\n    }\n}\n\nexport default TodoListTitle;\n\n","import React from 'react';\nimport './App.css';\n\nclass AddNewItemForm extends React.Component {\n    state = {\n        error: false,\n        title: ''\n    }\n\n    onAddItemClick = () => {\n        let newText = this.state.title\n        if (newText.trim() === '') {\n            return this.setState({\n                error: true,\n            })\n        }else {\n            this.setState({\n                title: ''\n            })\n        }\n        this.props.addItem(newText);\n    }\n    onTitleChange = (e) => {\n        this.setState({\n            error: false,\n            title: e.currentTarget.value\n        })\n    }\n    onKeyPress = (e) => {\n        if (e.key === 'Enter') {\n            this.onAddItemClick()\n        }\n    }\n\n    render = () => {\n        let errorClass = this.state.error === true ? 'error' : '';\n        return (\n            <div className=\"todoList-header\">\n                <h3 className=\"todoList-header__title\">{this.props.title}</h3>\n                <div className=\"todoList-newTaskForm\">\n                    <input onChange={this.onTitleChange}\n                        value={this.state.title}\n                        className={errorClass}\n                        type=\"text\" placeholder=\"New Item name\"\n                        onKeyPress={this.onKeyPress} />\n                    <button onClick={this.onAddItemClick}>Add</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default AddNewItemForm;\n\n","import React from 'react';\nimport './App.css';\nimport TodoListTasks from './TodoListTasks';\nimport TodoListFooter from './TodoListFooter';\nimport TodoListTitle from './TodoListTitle';\nimport AddNewItemForm from './AddNewItemForm';\n\nclass TodoList extends React.Component {\n\n    componentDidMount() {\n        this.restoreState();\n    }\n    componentDidUpdate() {\n        this.saveState();\n    }\n\n    newTaskTitleRef = React.createRef();\n    \n    state = {\n        tasks: [],\n        filterValue: 'All'\n    }\n\n    nextTaskId = 0;\n\n    saveState = () => {\n        let stateAsString = JSON.stringify(this.state);\n        localStorage.setItem('test-todolist' + this.props.id, stateAsString);\n    }\n\n    restoreState = () => {\n        let state = {\n            tasks: [],\n            filterValue: \"All\"\n        };\n        let stateAsString = localStorage.getItem('test-todolist' + this.props.id);\n        if (stateAsString !== null) {\n            state = JSON.parse(stateAsString)\n        }\n        this.setState(state, () => {\n            this.state.tasks.map(t=> {\n                if(t.id >= this.nextTaskId) {\n                    return this.nextTaskId++;\n                }\n            })\n        })\n    }\n\n    addItem = (newText) => {\n        let newTask = {\n            id: this.nextTaskId,\n            title: newText,\n            isDone: false,\n            priority: 'low'\n        };\n        this.nextTaskId++;\n        let newTasks = [...this.state.tasks, newTask];\n        this.setState({\n            tasks: newTasks\n        })\n    }\n\n    changeTask = (taskId, obj) => {\n        let newTasks = this.state.tasks.map(t => {\n            if (t.id !== taskId) {\n                return t;\n            } else {\n                return { ...t, ...obj}\n            }\n        })\n        this.setState({tasks: newTasks})\n        this.saveState()\n    }\n\n    changeFilter = (newFilterValue) => {\n        this.setState({\n            filterValue: newFilterValue\n        });\n    }\n\n    changeStatus = (taskId, isDone) => {\n        this.changeTask(taskId, {isDone: isDone})\n    }\n    changeTitle = (taskId, incomTitle) => {\n        this.changeTask(taskId, {title: incomTitle})\n    }\n    changePriority = (taskId, incomPriority) => {\n        this.changeTask(taskId, {priority: incomPriority})\n    }\n\n    render = () => {\n        return (\n            <div className=\"App\">\n                <div className=\"todoList\">\n                    <TodoListTitle title={this.props.title}/>\n                    <AddNewItemForm addItem={this.addItem} />\n                    <TodoListTasks changeStatus={this.changeStatus}\n                    changePriority={this.changePriority}\n                    changeTitle={this.changeTitle}\n                    tasks={this.state.tasks.filter(t => {\n                        switch (this.state.filterValue) {\n                            case 'All':\n                                return t;\n\n                            case 'Completed':\n                                return t.isDone;\n                            case 'Active':\n                                return !t.isDone;\n                            default:\n                                return t;\n                        }\n                    })} />\n                    <TodoListFooter changeFilter={this.changeFilter} filterValue={this.state.filterValue} />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default TodoList;\n\n","import React from 'react';\nimport './App.css';\nimport TodoList from './TodoList';\nimport AddNewItemForm from './AddNewItemForm';\n\nclass App extends React.Component {\n    componentDidMount() {\n        this.restoreState();\n    }\n    componentDidUpdate() {\n        this.saveState();\n    }\n    state = {\n        todolists: [],\n        nextTaskId: 1\n    }\n    saveState = () => {\n        let stateAsString = JSON.stringify(this.state);\n        localStorage.setItem('mainTest-todolist', stateAsString)\n    }\n    restoreState = () => {\n        let state = {\n            tasks: []\n        };\n        let stateAsString = localStorage.getItem('mainTest-todolist');\n        if (stateAsString !== null) {\n            state = JSON.parse(stateAsString)\n        }\n        this.setState(state)\n    }\n    addTodoList = (newTitle) => {\n      let newTask = {\n            id: this.state.nextTaskId,\n            title: newTitle\n        };\n        this.state.nextTaskId++;\n        let newTasks = [...this.state.todolists, newTask];\n        this.setState({\n            todolists: newTasks\n        })\n    }\n\n    render = () => {\n        const todoList = this.state.todolists.map(tl => <TodoList id={tl.id} title={tl.title} />)\n        return (\n            <>\n                <div>\n                    <AddNewItemForm addItem={this.addTodoList}/>\n                </div>\n                <div className=\"App\">\n                    {todoList}\n                </div>\n            </>\n        );\n    }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}