{"version":3,"sources":["TodoListTask.js","TodoListTasks.js","TodoListFooter.js","AddNewItemForm.js","TodoListTitle.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoListTask","state","editMode","onTitleChanged","e","_this","props","changeTitle","task","id","currentTarget","value","onIsDoneChanged","changeStatus","checked","activateEditMode","setState","deActivateEditMode","classesForTask","this","isDone","react_default","a","createElement","className","type","onChange","onBlur","autoFocus","title","onClick","priority","React","Component","TodoListTasks","render","tasksElements","tasks","map","src_TodoListTask","TodoListFooter","isHidden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filterValue","classForCompleted","classForActive","AddNewItemForm","error","onAddItemClick","newTitle","trim","addItem","trimLeft","onKeyPress","key","classForInput","placeholder","TodoListTitle","TodoList","nextTaskId","saveState","stateAsString","JSON","stringify","localStorage","setItem","restoreState","getItem","parse","forEach","newTask","newTasks","concat","Object","toConsumableArray","newFilterValue","taskId","changeTask","obj","t","_objectSpread","filter","src_TodoListTitle","src_AddNewItemForm","src_TodoListTasks","src_TodoListFooter","App","nextTodoListId","todolists","addTodoList","newTodoList","tl","src_TodoList","Fragment","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.03616072.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\n\nclass TodoListTask extends React.Component {\n    state = {\n        editMode: false\n    }\n    onTitleChanged = (e) => {\n        this.props.changeTitle(this.props.task.id, e.currentTarget.value)\n    }\n    onIsDoneChanged = (e) => {\n        this.props.changeStatus(this.props.task.id, e.currentTarget.checked)\n    }\n\n    activateEditMode = () => {\n        this.setState({ editMode: true })\n    }\n\n    deActivateEditMode = () => {\n        this.setState({ editMode: false })\n    }\n\n    render() {\n\n        let classesForTask = this.props.task.isDone\n            ? 'todoList-task done' : 'todolist-task';\n\n        return (\n            <div className={classesForTask}>\n                <input type=\"checkbox\"\n                    checked={this.props.task.isDone}\n                    onChange={this.onIsDoneChanged} />\n                {this.state.editMode\n                    ? <input onBlur={this.deActivateEditMode}\n                     autoFocus={true}\n                      value={this.props.task.title}\n                      onChange={this.onTitleChanged} />\n                    : <span onClick={this.activateEditMode}>{this.props.task.id}: {this.props.task.title}</span>\n                }, priority: {this.props.task.priority}\n\n            </div>\n        );\n    }\n}\n\nexport default TodoListTask;\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './App.css';\nimport TodoListTask from \"./TodoListTask\";\n\nclass TodoListTasks extends React.Component {\n    render = () => {\n\n        let tasksElements = this.props.tasks.map(task => {\n            return <TodoListTask task={task}\n                changeStatus={this.props.changeStatus}\n                changeTitle={this.props.changeTitle}\n            />\n        });\n        return (\n            <div className=\"todoList-tasks\">\n                {tasksElements}\n            </div>\n        );\n    }\n}\n\nexport default TodoListTasks;\n\nTodoListTasks.propTypes = {\n    tasks: PropTypes.array\n}\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './App.css';\n\nclass TodoListFooter extends React.Component {\n    state = {\n        isHidden: false\n    }\n\n    onAllFilterClick = () => { this.props.changeFilter('All')  }\n    onCompletedFilterClick = () => {  this.props.changeFilter('Completed')  }\n    onActiveFilterClick = () => { this.props.changeFilter('Active') } \n    onShowFiltersClick = () => { this.setState({ isHidden: true })  }\n    onHideFiltersClick = () => { this.setState({ isHidden: false }) }\n\n    render = () => {\n\n        let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"\";\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"\";\n        let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"\";\n\n        return (\n            <div className=\"todoList-footer\"> {!this.state.isHidden &&\n                <div>\n                    <button onClick={this.onAllFilterClick} className={classForAll}>All</button>\n                    <button onClick={this.onCompletedFilterClick} className={classForCompleted}>Completed</button>\n                    <button onClick={this.onActiveFilterClick } className={classForActive}>Active</button>\n                </div>}\n                {!this.state.isHidden && <span onClick={this.onShowFiltersClick}>Hide</span>}\n                {this.state.isHidden && <span onClick={this.onHideFiltersClick}>show</span>}\n            </div>\n\n        );\n    }\n}\n\nexport default TodoListFooter;\n\nTodoListFooter.propTypes = {\n    filterValue: PropTypes.string\n}\n\n","import React from 'react';\nimport './App.css';\n\nclass AddNewItemForm extends React.Component {\n\n    state = {\n        error: false,\n        title: ''\n    }\n    onAddItemClick = () => {\n        let newTitle = this.state.title;\n        this.setState({ title: '' });\n        if (newTitle.trim() === '') {\n            this.setState({ error: true })\n        } else {\n            this.setState({ error: false })\n            this.props.addItem(newTitle);\n        }\n    }\n\n    onTitleChanged = (e) => {\n        this.setState({\n            error: false,\n            title: e.currentTarget.value.trimLeft()\n        })\n    }\n\n    onKeyPress = (e) => {\n        if (e.key === 'Enter') {\n            this.onAddItemClick();\n        }\n    }\n\n    render = () => {\n        let classForInput = this.state.error ? 'error' : '';\n        return (\n            <div className={\"todoList-newTaskForm\"}>\n                <input onKeyPress={this.onKeyPress}\n                    onChange={this.onTitleChanged}\n                    className={classForInput}\n                    value={this.state.title}\n                    type={\"text\"}\n                    placeholder={\"New item name\"} />\n                <button onClick={this.onAddItemClick}>Add</button>\n            </div>\n        );\n    }\n}\n\nexport default AddNewItemForm;\n\n","import React from 'react';\nimport './App.css';\n\nclass TodoListTitle extends React.Component {\n\n\n    render = () => {\n      \n        return (\n            <div className={\"todoList-header\"}>\n    <h3 className={\"todoList-header__title\"}>{this.props.title}</h3>\n            </div>\n        );\n    }\n}\n\nexport default TodoListTitle;\n\n","import React from 'react';\nimport './App.css';\nimport TodoListTasks from \"./TodoListTasks\";\nimport TodoListFooter from \"./TodoListFooter\";\nimport AddNewItemForm from './AddNewItemForm';\nimport TodoListTitle from './TodoListTitle';\n\nclass TodoList extends React.Component {\n\n\n\n    nextTaskId = 0;\n\n    state = {\n        tasks: [\n            // { id: 0, title: \"JS\", isDone: true, priority: \"medium\" },\n            // { id: 1, title: \"HTML\", isDone: true, priority: \"low\" },\n            // { id: 2, title: \"CSS\", isDone: true, priority: \"low\" },\n            // { id: 3, title: \"ReactJS\", isDone: false, priority: \"high\" }\n        ],\n\n        filterValue: \"All\"\n    }\n\n    componentDidMount() {\n        this.restoreState();\n    }\n\n    saveState = () => {\n        let stateAsString = JSON.stringify(this.state);\n        localStorage.setItem('our-state' + this.props.id, stateAsString)\n    }\n\n    restoreState = () => {\n        let state = {\n            tasks: [],\n            filterValue: 'All'\n        }\n        let stateAsString = localStorage.getItem('our-state' + this.props.id)\n        if (stateAsString != null) {\n            state = JSON.parse(stateAsString);\n        }\n        this.setState(state, () => {\n            this.state.tasks.forEach((task) => {\n                if (task.id >= this.nextTaskId) {\n                    this.nextTaskId = task.id++\n                }\n            })\n        });\n    }\n\n    addItem = (newTitle) => {\n        let newTask = {\n            id: this.nextTaskId,\n            title: newTitle,\n            isDone: false,\n            priority: \"high\"\n        };\n        this.nextTaskId++;\n        let newTasks = [...this.state.tasks, newTask];\n        this.setState({\n            tasks: newTasks\n        }, () => { this.saveState(); });\n    }\n\n    changeFilter = (newFilterValue) => {\n        this.setState({\n            filterValue: newFilterValue\n        }, () => { this.saveState(); });\n    }\n\n    changeStatus = (taskId, isDone) => {\n        this.changeTask(taskId, { isDone: isDone })\n    }\n    changeTitle = (taskId, newTitle) => {\n        this.changeTask(taskId, { title: newTitle })\n    }\n    changeTask = (taskId, obj) => {\n        let newTasks = this.state.tasks.map(t => {\n            if (t.id !== taskId) {\n                return t\n            } else {\n                return { ...t, ...obj }\n            }\n        });\n\n        this.setState({\n            tasks: newTasks\n        }, () => { this.saveState(); })\n    }\n\n    render = () => {\n        const getFilteredTask = (tasks, filter) => {\n            return tasks.filter(t => {\n                switch (filter) {\n                    case 'All': return true;\n                    case 'Completed': return t.isDone;\n                    case 'Active': return !t.isDone;\n                }\n            }\n            )\n        };\n        return (\n            <div className=\"App\" >\n                <div className=\"todoList\">\n                    <div className={\"todoList-header\"}>\n                        <TodoListTitle title={this.props.title} />\n                        <AddNewItemForm addItem={this.addItem} />\n                    </div>\n                    <TodoListTasks tasks={getFilteredTask(this.state.tasks, this.state.filterValue)}\n                        changeStatus={this.changeStatus} changeTitle={this.changeTitle}\n                    />\n                    <TodoListFooter filterValue={this.state.filterValue}\n                        changeFilter={this.changeFilter}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default TodoList;","import React from 'react';\nimport './App.css';\nimport TodoList from './TodoList';\nimport AddNewItemForm from './AddNewItemForm';\n\nclass App extends React.Component {\n\n    nextTodoListId = 0;\n\n    state = {\n        todolists: [\n        ]\n    }\n\n    componentDidMount() {\n        this.restoreState();\n    }\n\n    componentDidUpdate() {\n        this.saveState();\n    }\n\n    addTodoList = (title) => {\n        let newTodoList = {\n            id: this.nextTodoListId,\n            title: title\n        };\n        this.nextTodoListId++;\n        this.setState({ todolists: [...this.state.todolists, newTodoList] }, this.saveState)\n    }\n\n    saveState = () => {\n        let stateAsString = JSON.stringify(this.state);\n        localStorage.setItem('todolist_state', stateAsString)\n    }\n\n    restoreState = () => {\n        let state = this.state;\n        let stateAsString = localStorage.getItem('todolist_state');\n        if (stateAsString !== null) {\n            state = JSON.parse(stateAsString)\n        }\n        this.setState(state, () => {\n            this.state.todolists.forEach(tl => {\n                if (tl.id >= this.nextTodoListId) {\n                    this.nextTodoListId++;\n                }\n            }\n            )\n        })\n    }\n    render = () => {\n\n        let todolists = this.state.todolists.map(tl => <TodoList id={tl.id} title={tl.title} />)\n        return (\n            <>\n                <div>\n                    <AddNewItemForm addItem={this.addTodoList}/>\n                </div>\n                <div className=\"App\" >\n                    {todolists}\n                </div>\n\n            </>\n        );\n    }\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}